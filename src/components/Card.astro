---
import { Image } from "astro:assets";
import { Icon } from "astro-icon/components";

export interface Props {
  variant?: "default" | "feature";
  title?: string;
  subtitle?: string;
  description?: string;
  image?: ImageMetadata;
  imageUrl?: string;
  imageAlt?: string;
  icon?: string;
  iconColor?: string;
  badge?: string;
  badgeColor?: string;
  status?: {
    label: string;
    color: string;
  };
  statusPosition?: "left" | "right";
  link?: string;
  linkTarget?: string;
  linkRel?: string;
  onClick?: string;
  isPast?: boolean;
  isHighlighted?: boolean;
  class?: string;
  contentClass?: string;
  imageClass?: string;
  titleClass?: string;
  hoverEffect?: boolean;
}

const {
  variant = "default",
  title,
  subtitle,
  description,
  image,
  imageUrl,
  imageAlt,
  icon,
  iconColor = "text-accent-two",
  badge,
  badgeColor = "bg-accent-one/10 text-accent-one",
  status,
  statusPosition = "left",
  link,
  linkTarget = "_blank",
  linkRel = "noopener noreferrer",
  onClick,
  isPast = false,
  isHighlighted = false,
  class: className = "",
  contentClass = "",
  imageClass = "",
  titleClass = "",
  hoverEffect = true,
} = Astro.props;

const isClickable = link || onClick;

const baseClasses = `
  relative rounded-lg transition-all h-full flex flex-col overflow-hidden
  ${isPast ? "opacity-75" : ""}
  ${isHighlighted ? "ring-2 ring-accent-one/40" : ""}
  ${hoverEffect && isClickable ? "cursor-pointer group" : ""}
`;

const borderClasses = isPast
  ? "border border-color-300 dark:border-color-700"
  : isHighlighted
    ? "border-2 border-accent-one"
    : "border-2 hover:border-accent-two border-accent-one/40";

const backgroundClasses = isPast
  ? "bg-surface/50"
  : isHighlighted
    ? "bg-accent-one/5"
    : "bg-special-lighter";

const combinedClasses =
  `${baseClasses} ${borderClasses} ${backgroundClasses} ${className}`.trim();

const Wrapper = link ? "a" : onClick ? "button" : "div";
const wrapperProps = link
  ? { href: link, target: linkTarget, rel: linkRel }
  : onClick
    ? { onclick: onClick, type: "button" }
    : {};
---

{/* @ts-ignore - Astro inline event handlers use lowercase 'onclick' */}
<Wrapper class={combinedClasses} {...wrapperProps}>
  {/* Status badge */}
  {
    status && (
      <div
        class={`absolute top-[90px] ${statusPosition === "right" ? "right-4" : "left-4"} z-10 px-3 py-1 rounded-full text-xs font-semibold text-white ${status.color}`}
      >
        {status.label}
      </div>
    )
  }

  {/* Image/Icon section */}
  {
    (image || imageUrl || icon) && variant !== "feature" && (
      <div
        class={`flex items-center justify-center overflow-hidden ${imageClass?.includes("bg-") ? "" : "h-32"}`}
      >
        <div
          class={`w-full ${imageClass?.includes("bg-") ? "" : "h-full"} flex items-center justify-center transition-transform duration-300 ease-out ${
            hoverEffect && isClickable ? "group-hover:scale-105" : ""
          } ${imageClass}`}
        >
          {image ? (
            <Image
              src={image}
              alt={imageAlt || title || ""}
              class={`${imageClass?.includes("object-contain") ? "object-contain" : "w-full h-full object-cover"}`}
            />
          ) : imageUrl ? (
            <img
              src={imageUrl}
              alt={imageAlt || title || ""}
              class={`${imageClass?.includes("object-contain") ? "object-contain" : "w-full h-full object-cover"}`}
            />
          ) : icon ? (
            <Icon name={icon} class={`w-20 h-20 ${iconColor}`} />
          ) : null}
        </div>
      </div>
    )
  }

  {/* Feature variant image */}
  {
    variant === "feature" && (image || imageUrl) && (
      <div class="h-48 -mx-0 -mt-0 mb-4 overflow-hidden">
        {image ? (
          <Image
            src={image}
            alt={imageAlt || title || ""}
            class={`w-full h-full object-cover ${imageClass}`}
          />
        ) : (
          <img
            src={imageUrl}
            alt={imageAlt || title || ""}
            class={`w-full h-full object-cover ${imageClass}`}
          />
        )}
      </div>
    )
  }

  {/* Content section */}
  <div
    class={`flex-1 flex flex-col ${
      status && !image && !imageUrl && !icon ? "pt-12 px-5 pb-5" : "p-5"
    } ${contentClass}`}
  >
    {/* Icon for feature variant when no image */}
    {
      icon && variant === "feature" && !image && !imageUrl && (
        <div class="mb-4">
          <Icon name={icon} class={`w-12 h-12 mx-auto ${iconColor}`} />
        </div>
      )
    }

    {/* Title */}
    {
      title && (
        <h3
          class={`
            text-lg font-semibold mb-2
            ${
              isPast
                ? "text-color-600 dark:text-color-400"
                : "gradient-brand-text"
            }
            ${titleClass}
          `}
        >
          {title}
        </h3>
      )
    }

    {/* Badge */}
    {
      badge && (
        <span
          class={`inline-block px-2 py-1 mb-2 text-xs font-semibold rounded ${badgeColor}`}
        >
          {badge}
        </span>
      )
    }

    {/* Subtitle */}
    {
      subtitle && (
        <p class="text-sm font-medium text-accent-two mb-2">{subtitle}</p>
      )
    }

    {/* Description */}
    {
      description && (
        <p class="text-sm text-color-600 dark:text-color-400 line-clamp-3 flex-1">
          {description}
        </p>
      )
    }

    {/* Default slot for additional content */}
    <slot />
  </div>

  {/* Additional slots for custom content */}
  <slot name="footer" />
</Wrapper>

<style>
  /* Additional styles can be added here if needed */
</style>
