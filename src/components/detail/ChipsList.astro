---
import InfoCard from "./InfoCard.astro";

export interface ChipGroup {
  title: string;
  items: string[];
  variant?: "primary" | "secondary" | "tertiary" | "default";
}

export interface Props {
  title: string;
  groups?: ChipGroup[];
  items?: string[];
  variant?: "primary" | "secondary" | "tertiary" | "default";
  icon?: string;
  className?: string;
}

const {
  title,
  groups,
  items,
  variant = "default",
  icon,
  className = "",
} = Astro.props;

// If items is provided directly, convert to single group
const chipGroups = groups || (items ? [{ title: "", items, variant }] : []);

// Define variant styles
const variantStyles = {
  primary: "bg-accent-two/10 text-accent-base",
  secondary: "bg-accent-one/10 text-accent-base",
  tertiary: "bg-surface-lighter text-accent-base",
  default: "bg-accent-base/10 text-accent-base",
};

// Filter out empty groups
const validGroups = chipGroups.filter(
  (group) => group.items && group.items.length > 0,
);
---

{
  validGroups.length > 0 && (
    <div class={`mb-8 ${className}`}>
      <InfoCard title={title}>
        <div class="space-y-4">
          {validGroups.map((group, index) => (
            <div class={index > 0 ? "pt-4 border-t border-accent-one/10" : ""}>
              {group.title && (
                <h4 class="text-xs font-semibold mb-3 text-accent-base uppercase tracking-wider">
                  {group.title}
                </h4>
              )}
              <div class="flex flex-wrap gap-2">
                {group.items.map((item) => (
                  <span
                    class={`px-3 py-1.5 rounded-lg text-sm transition-all duration-200 hover:scale-105 ${variantStyles[group.variant || variant]}`}
                  >
                    {item}
                  </span>
                ))}
              </div>
            </div>
          ))}
        </div>
      </InfoCard>
    </div>
  )
}
