---
import BaseDetailLayout from './BaseDetailLayout.astro';
import type { DetailHeroBadge } from './DetailHero';
import type { ActionButton } from './ActionButtonGroup';
import type { Contributor, Organization } from './ContributorsSection';
import type { RelatedItem } from './RelatedItemsGrid';

export interface Props {
  // Layout control
  className?: string;
  showHero?: boolean;
  showHeader?: boolean;
  showActions?: boolean;
  showContributors?: boolean;
  showSidebar?: boolean;
  showRelated?: boolean;

  // Hero/Header data
  heroImage?: any;
  title: string;
  subtitle?: string;
  badges?: DetailHeroBadge[];

  // Contributors data
  organizations?: Contributor[];
  people?: Contributor[];
  leadOrg?: Organization;
  supportingOrgs?: Organization[];
  categories?: string[];
  researchAreas?: string[];
  languages?: string[];

  // Actions data
  actionButtons?: ActionButton[];

  // Related items
  relatedItems?: RelatedItem[];
  relatedTitle?: string;
  relatedSubtitle?: string;
  relatedItemType?: 'hardware' | 'software' | 'people' | 'partners' | 'studies' | 'events';

  // Content type for default configurations
  contentType?: 'hardware' | 'software' | 'people' | 'partners' | 'studies' | 'events';
}

const {
  className = "",
  showHero = true,
  showHeader = true,
  showActions = true,
  showContributors = true,
  showSidebar = true,
  showRelated = true,
  heroImage,
  title,
  subtitle,
  badges = [],
  organizations = [],
  people = [],
  leadOrg,
  supportingOrgs = [],
  categories = [],
  researchAreas = [],
  languages = [],
  actionButtons = [],
  relatedItems = [],
  relatedTitle,
  relatedSubtitle,
  relatedItemType = 'hardware',
  contentType,
} = Astro.props;

// Import components dynamically based on what's needed
import { DetailHero } from './DetailHero';
import { DetailHeader } from './DetailHeader';
import { ActionButtonGroup } from './ActionButtonGroup';
import { ContributorsSection } from './ContributorsSection';
import { RelatedItemsGrid } from './RelatedItemsGrid';

// Determine whether to show hero or header
const shouldShowHero = showHero && heroImage;
const shouldShowHeader = showHeader && !shouldShowHero;

// Check if we have contributors data
const hasContributors = (organizations.length > 0 || people.length > 0 || leadOrg || supportingOrgs.length > 0) && showContributors;

// Check if we have action buttons
const hasActions = actionButtons.length > 0 && showActions;

// Check if we have related items
const hasRelated = relatedItems.length > 0 && showRelated;
---

<BaseDetailLayout
  className={className}
  showHero={shouldShowHero}
  showHeader={shouldShowHeader}
  showActions={hasActions}
  showContributors={hasContributors}
  showSidebar={showSidebar}
  showRelated={hasRelated}
>
  <!-- Breadcrumbs slot - pass through -->
  {Astro.slots.has('breadcrumbs') && (
    <Fragment slot="breadcrumbs">
      <slot name="breadcrumbs" />
    </Fragment>
  )}

  <!-- Hero Section -->
  {shouldShowHero && (
    <DetailHero
      slot="hero"
      image={heroImage}
      title={title}
      subtitle={subtitle}
      badges={badges}
      client:load
    />
  )}

  <!-- Header Section (when no hero) -->
  {shouldShowHeader && (
    <DetailHeader
      slot="header"
      title={title}
      subtitle={subtitle}
      badges={badges.map(b => ({
        text: b.text,
        color: b.color,
        variant: b.variant
      }))}
      client:load
    />
  )}

  <!-- Top Actions slot - pass through -->
  {Astro.slots.has('top-actions') && (
    <Fragment slot="top-actions">
      <slot name="top-actions" />
    </Fragment>
  )}

  <!-- Contributors Section -->
  {hasContributors && (
    <ContributorsSection
      slot="contributors"
      organizations={organizations}
      people={people}
      leadOrg={leadOrg}
      supportingOrgs={supportingOrgs}
      categories={categories}
      researchAreas={researchAreas}
      languages={languages}
      showStats={true}
      client:load
    />
  )}

  <!-- Action Buttons -->
  {hasActions && (
    <ActionButtonGroup
      slot="actions"
      buttons={actionButtons}
      size="large"
      client:load
    />
  )}

  <!-- Meta Section slot - pass through -->
  {Astro.slots.has('meta-section') && (
    <Fragment slot="meta-section">
      <slot name="meta-section" />
    </Fragment>
  )}

  <!-- Before Content slot - pass through -->
  {Astro.slots.has('before-content') && (
    <Fragment slot="before-content">
      <slot name="before-content" />
    </Fragment>
  )}

  <!-- Main Content (default slot) -->
  <slot />

  <!-- After Content slot - pass through -->
  {Astro.slots.has('after-content') && (
    <Fragment slot="after-content">
      <slot name="after-content" />
    </Fragment>
  )}

  <!-- Sidebar slot - pass through or use default -->
  {showSidebar && (
    <Fragment slot="sidebar">
      {Astro.slots.has('sidebar') ? (
        <slot name="sidebar" />
      ) : (
        Astro.slots.has('sidebar-sections') && (
          <slot name="sidebar-sections" />
        )
      )}
    </Fragment>
  )}

  <!-- Additional Sections slot - pass through -->
  {Astro.slots.has('additional-sections') && (
    <Fragment slot="additional-sections">
      <slot name="additional-sections" />
    </Fragment>
  )}

  <!-- Related Items -->
  {hasRelated && (
    <RelatedItemsGrid
      slot="related"
      title={relatedTitle || `Related ${contentType || 'Items'}`}
      subtitle={relatedSubtitle}
      items={relatedItems}
      itemType={relatedItemType}
      columns={3}
      client:load
    />
  )}

  <!-- Footer slot - pass through -->
  {Astro.slots.has('footer') && (
    <Fragment slot="footer">
      <slot name="footer" />
    </Fragment>
  )}
</BaseDetailLayout>
