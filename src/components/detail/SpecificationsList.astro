---
import { Icon } from "astro-icon/components";
import InfoCard from "./InfoCard.astro";

export interface SpecificationItem {
  label: string;
  value: string | number | string[];
  icon?: string;
  link?: string; // Optional URL to make the value clickable
  external?: boolean; // If true, opens link in new tab with rel="noopener noreferrer"
}

/**
 * SpecificationsList Component Props
 *
 * @example Basic specifications (hardware/software)
 * ```
 * <SpecificationsList
 *   title="SPECIFICATIONS"
 *   items={[
 *     { label: "Weight", value: "2.5 kg" },
 *     { label: "Battery", value: "8 hours" }
 *   ]}
 * />
 * ```
 *
 * @example With links (event locations)
 * ```
 * <SpecificationsList
 *   title="LOCATION"
 *   items={[
 *     { label: "Venue", value: "Convention Center" },
 *     {
 *       label: "Map",
 *       value: "View on Google Maps",
 *       link: "https://maps.google.com/?q=...",
 *       external: true,
 *       icon: "solar:map-line-duotone"
 *     }
 *   ]}
 * />
 * ```
 *
 * @example System requirements with documentation links
 * ```
 * <SpecificationsList
 *   title="SYSTEM REQUIREMENTS"
 *   items={[
 *     { label: "Runtime", value: "Python 3.8+" },
 *     {
 *       label: "GPU",
 *       value: "CUDA 11.0+ (see requirements)",
 *       link: "/docs/gpu-requirements",
 *       icon: "solar:cpu-bolt-line-duotone"
 *     }
 *   ]}
 * />
 * ```
 */
export interface Props {
  title: string;
  items: SpecificationItem[] | Record<string, any>;
  defaultItemIcon?: string;
  className?: string;
}

const {
  title,
  items,
  defaultItemIcon = "solar:settings-minimalistic-line-duotone",
  className = "",
} = Astro.props;

// Convert items to array format if it's an object
const itemsArray: SpecificationItem[] = Array.isArray(items)
  ? items
  : Object.entries(items).map(([key, value]) => ({
      label: key,
      value: Array.isArray(value) ? value.join(", ") : String(value),
    }));

// Format label to be more readable (e.g., "maxSpeed" -> "Max Speed")
function formatLabel(label: string): string {
  return label
    .replace(/([A-Z])/g, " $1")
    .replace(/^./, (str) => str.toUpperCase())
    .trim();
}
---

{
  itemsArray.length > 0 && (
    <div class={`specifications-section mb-8 ${className}`}>
      <InfoCard title={title}>
        <div class="space-y-3">
          {itemsArray.map((item) => (
            <div class="flex items-start gap-3">
              <Icon
                name={item.icon || defaultItemIcon}
                class="text-accent-two mt-0.5 w-4 h-4 flex-shrink-0"
              />
              <div class="flex-1">
                <div class="text-xs font-medium text-accent-two mb-0.5">
                  {formatLabel(item.label)}
                </div>
                <div class="text-sm text-accent-base/80">
                  {item.link ? (
                    <a
                      href={item.link}
                      target={item.external ? "_blank" : undefined}
                      rel={item.external ? "noopener noreferrer" : undefined}
                      class="text-accent-one hover:text-accent-two transition-colors inline-flex items-center gap-1"
                    >
                      {item.value}
                      {item.external && (
                        <Icon
                          name="solar:arrow-right-up-line-duotone"
                          class="w-3 h-3"
                        />
                      )}
                    </a>
                  ) : (
                    item.value
                  )}
                </div>
              </div>
            </div>
          ))}
        </div>
      </InfoCard>
    </div>
  )
}
