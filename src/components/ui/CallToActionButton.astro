---
import Index from '@/pages/index.astro';
import { CallToActionButton as CallToActionButtonReact } from './CallToActionButton.tsx';

const indicatorClassLookup = {
  default: 'transition-colors px-2 bg-accent-base rounded-sm text-surface group-hover/button:bg-surface/75 group-hover/button:text-accent-base',
  primary: 'transition-colors px-2 bg-accent-two rounded-sm text-surface group-hover/button:bg-surface/75 group-hover/button:text-accent-two',
  secondary: 'transition-colors px-2 bg-accent-one rounded-sm text-surface group-hover/button:bg-surface/75 group-hover/button:text-accent-one',
  tertiary: 'transition-colors px-2 bg-accent-three rounded-sm text-surface group-hover/button:bg-surface/75 group-hover/button:text-accent-three',
};

export interface Props {
  /** The text to display in the button */
  text: string;
  /** The size of the button */
  size?: "small" | "medium" | "large";
  /** Visual variant of the button */
  variant?: "default" | "primary" | "secondary" | "tertiary";
  /** The URL to link to (if provided, renders as an anchor tag) */
  href?: string;
  /** Additional CSS classes */
  class?: string;
  /** HTML type attribute for button element */
  type?: "button" | "submit" | "reset";
  /** Whether the button should take full width */
  fullWidth?: boolean;
  /** Aria label for accessibility */
  ariaLabel?: string;
  /** Target attribute for links */
  target?: string;
  /** Rel attribute for links */
  rel?: string;
  /** Click handler (only used when href is not provided) */
  onClick?: string;
  /** An indicator to display to the right of text */
  indicatorText?: string;
}

const {
  text,
  size = "medium",
  variant = "primary",
  href,
  class: className,
  type = "button",
  fullWidth = false,
  ariaLabel,
  target,
  rel,
  onClick,
  indicatorText
} = Astro.props;

const usedClassName = `${className} ${indicatorText ? 'gap-4' : ''}`;

// Convert onClick string to a client-side function if needed
const clickHandler = onClick ? `(${onClick})()` : undefined;
const indicatorClass = indicatorClassLookup[variant ?? "default"];
---

<CallToActionButtonReact
  size={size}
  variant={variant}
  href={href}
  className={usedClassName}
  type={type}
  fullWidth={fullWidth}
  ariaLabel={ariaLabel}
  target={target}
  rel={rel}
  client:load={onClick ? true : false}
  data-onclick={clickHandler}
>
  {text}
  {indicatorText && <span class={indicatorClass}>{indicatorText}</span>}
</CallToActionButtonReact>

{onClick && <script define:vars={{ clickHandler }}>
  document.addEventListener('DOMContentLoaded', () => {
    const button = document.querySelector('[data-onclick]');
    if (button) {
      button.addEventListener('click', () => {
        eval(button.dataset.onclick);
      });
    }
  });
</script>}
