---
import {
  type CollectionEntry,
  getCollection,
  render,
  getEntry,
} from "astro:content";
import PageLayout from "@/layouts/Base.astro";
import BaseDetailLayout from "@/components/detail/BaseDetailLayout.astro";
import { DetailHero } from "@/components/detail/DetailHero";
import { DetailHeader } from "@/components/detail/DetailHeader";
import ContentSection from "@/components/detail/ContentSection.astro";
import { ItemCard } from "@/components/ItemCard";
import { getAllPartners } from "@/data/partners";
import { getPerson } from "@/data/people";
import { getAllStudies } from "@/data/studies";
import { getAllHardware } from "@/data/hardware";
import { getAllSoftware } from "@/data/software";
import { getAllEvents } from "@/data/events";
import PersonPopoverWrapper from "@/components/PersonPopoverWrapper.astro";
import BasicChip from "@/components/BasicChip.astro";
import { Fragment } from "react";

export async function getStaticPaths() {
  const partners = await getCollection("partners", ({ data }) => {
    // In production, exclude drafts. In development, show all.
    return import.meta.env.PROD ? data.draft !== true : true;
  });
  return partners.map((entry) => ({
    params: { slug: entry.id },
    props: { entry },
  }));
}

type Props = {
  entry: CollectionEntry<"partners">;
};

const { entry } = Astro.props;
const { Content } = await render(entry);
const { data } = entry;

// Get related partners (by category or collaboration areas)
async function getRelatedPartners(
  partner: CollectionEntry<"partners">,
  limit: number = 3,
) {
  const allPartners = await getAllPartners();
  const relatedPartners: CollectionEntry<"partners">[] = [];

  // Filter out the current partner and find related ones
  const otherPartners = allPartners.filter((p) => p.id !== partner.id);

  // Score each partner based on similarity
  const scoredPartners = otherPartners.map((p) => {
    let score = 0;

    // Same type gets points
    if (p.data.type === partner.data.type) score += 2;

    // Same category gets points
    if (p.data.category === partner.data.category) score += 2;

    // Overlapping collaboration areas get points
    const partnerAreas = new Set(partner.data.collaboration.areas || []);
    const otherAreas = p.data.collaboration.areas || [];
    const overlap = otherAreas.filter((area) => partnerAreas.has(area)).length;
    score += overlap;

    // Same location country gets a point
    if (p.data.location.country === partner.data.location.country) score += 1;

    return { partner: p, score };
  });

  // Sort by score and take the top ones
  scoredPartners.sort((a, b) => b.score - a.score);

  return scoredPartners
    .filter((sp) => sp.score > 0)
    .slice(0, limit)
    .map((sp) => sp.partner);
}

const relatedPartners = await getRelatedPartners(entry, 3);

// Get related content for this partner
async function getPartnerRelatedContent(partnerId: string) {
  // Get studies where this partner is involved
  const allStudies = await getAllStudies();
  const studies = allStudies.filter((study) =>
    study.data.institutions?.some((inst) => inst.partnerId === partnerId),
  );

  // Get hardware where this partner is lead or supporting
  const allHardware = await getAllHardware();
  const hardware = allHardware.filter(
    (hw) =>
      hw.data.leadOrganization === partnerId ||
      hw.data.supportingOrganizations?.includes(partnerId) ||
      hw.data.contributors?.some(
        (contributor) =>
          contributor.type === "organization" && contributor.id === partnerId,
      ),
  );

  // Get software where this partner is lead or supporting
  const allSoftware = await getAllSoftware();
  const software = allSoftware.filter(
    (sw) =>
      sw.data.leadOrganization === partnerId ||
      sw.data.supportingOrganizations?.includes(partnerId) ||
      sw.data.contributors?.some(
        (contributor) =>
          contributor.type === "organization" && contributor.id === partnerId,
      ),
  );

  // Get events where this partner is an organizer or sponsor
  const allEvents = await getAllEvents();
  const events = allEvents.filter((event) => {
    const isOrganizer = event.data.organizers?.some(
      (org) => org.type === "organization" && org.id === partnerId,
    );
    const isSponsor = event.data.sponsors?.some(
      (sponsor) => sponsor.partnerId === partnerId,
    );
    return isOrganizer || isSponsor;
  });

  return { studies, hardware, software, events };
}

const relatedContent = await getPartnerRelatedContent(entry.id);

const meta = {
  title: `${data.name} - Partner Organization`,
  description: data.description,
};

// Prepare status badges
const badges = [];
if (data.collaboration.active) {
  badges.push({
    text: "Active Partner",
    color: "green" as const,
    variant: "solid" as const,
  });
} else {
  badges.push({
    text: "Past Partner",
    color: "gray" as const,
    variant: "outline" as const,
  });
}

// Add type badge
const typeLabels = {
  academic: "Academic Institution",
  industry: "Industry Partner",
  nonprofit: "Non-Profit Organization",
  government: "Government Agency",
  community: "Community Organization",
};
badges.push({
  text: typeLabels[data.type] || data.type,
  color: "blue" as const,
  variant: "outline" as const,
});

// Prepare action buttons
const actionButtons = [];
if (data.website) {
  actionButtons.push({
    href: data.website,
    text: "Visit Website",
    variant: "default" as const,
    target: "_blank",
    rel: "noopener noreferrer",
  });
}
if (data.contact?.email) {
  actionButtons.push({
    href: `mailto:${data.contact.email}`,
    text: "Contact",
    variant: "primary" as const,
  });
}
if (data.socialMedia?.github) {
  actionButtons.push({
    href: `https://github.com/${data.socialMedia.github}`,
    text: "GitHub",
    variant: "secondary" as const,
    target: "_blank",
    rel: "noopener noreferrer",
  });
}
if (data.socialMedia?.linkedin) {
  actionButtons.push({
    href: `https://linkedin.com/company/${data.socialMedia.linkedin}`,
    text: "LinkedIn",
    variant: "tertiary" as const,
    target: "_blank",
    rel: "noopener noreferrer",
  });
}
if (data.socialMedia?.twitter) {
  actionButtons.push({
    href: `https://twitter.com/${data.socialMedia.twitter}`,
    text: "Twitter",
    variant: "tertiary" as const,
    target: "_blank",
    rel: "noopener noreferrer",
  });
}

// Prepare location metadata
const locationItems = [
  {
    label: "Location",
    value: `${data.location.city}, ${data.location.country}`,
  },
];

// Prepare contact metadata
const contactItems = [];
if (data.contact?.department) {
  contactItems.push({
    label: "Department",
    value: data.contact.department,
  });
}
if (data.contact?.email) {
  contactItems.push({
    label: "Email",
    value: data.contact.email,
    link: `mailto:${data.contact.email}`,
  });
}
if (data.contact?.phone) {
  contactItems.push({
    label: "Phone",
    value: data.contact.phone,
    link: `tel:${data.contact.phone}`,
  });
}

// Prepare key contacts with PersonPopover
const keyContactsWithData = await Promise.all(
  (data.keyContacts || []).map(async (contact) => {
    const person = await getPerson(contact.personId);
    return {
      ...contact,
      person: person?.data,
    };
  }),
);

// Filter out contacts where person data couldn't be found
const validKeyContacts = keyContactsWithData.filter((c) => c.person);

// Prepare collaboration details
const collaborationItems = [];
if (data.collaboration.startDate) {
  const startDate = new Date(data.collaboration.startDate);
  const endDate = data.collaboration.endDate
    ? new Date(data.collaboration.endDate)
    : null;

  let dateRange = startDate.getFullYear().toString();
  if (endDate) {
    dateRange += ` - ${endDate.getFullYear()}`;
  } else if (data.collaboration.active) {
    dateRange += " - Present";
  }

  collaborationItems.push({
    label: "Partnership Period",
    value: dateRange,
  });
}

// Category label
const categoryLabels = {
  research: "Research Collaboration",
  development: "Development Partner",
  funding: "Funding Partner",
  infrastructure: "Infrastructure Support",
  outreach: "Outreach & Education",
};
const categoryLabel = categoryLabels[data.category] || data.category;
---

<PageLayout meta={meta}>
  <BaseDetailLayout showSidebar={false}>
    <Fragment slot="hero">
      {
        data.logo ? (
          <DetailHero
            client:load
            image={data.logo}
            title={data.name}
            subtitle={
              data.shortName
                ? `${data.shortName} • ${data.description}`
                : data.description
            }
            badges={badges}
            featured={data.featured}
          />
        ) : (
          <DetailHeader
            client:load
            title={data.name}
            subtitle={
              data.shortName
                ? `${data.shortName} • ${data.description}`
                : data.description
            }
            badges={badges}
            featured={data.featured}
          />
        )
      }
    </Fragment>

    <Fragment slot="contributors">
      {/* Partnership Details */}
      <div class="partnership-details mb-8">
        <div
          class="bg-gradient-to-br from-surface-lighter to-surface rounded-xl border border-accent-one/20 p-6"
        >
          <h3
            class="text-xs font-semibold mb-3 text-accent-base uppercase tracking-wider"
          >
            PARTNERSHIP DETAILS
          </h3>

          {/* Category and Type */}
          <div class="flex flex-wrap gap-2 mb-4">
            <BasicChip text={categoryLabel} variant="primary" />
            <BasicChip
              text={typeLabels[data.type] || data.type}
              variant="default"
            />
          </div>

          {/* Details Grid */}
          <div class="grid grid-cols-2 md:grid-cols-3 gap-4 text-sm">
            <div>
              <span
                class="text-xs text-color-600 dark:text-color-400 font-semibold block mb-1"
                >Location</span
              >
              <span class="text-accent-base"
                >{data.location.city}, {data.location.country}</span
              >
            </div>
            {
              collaborationItems.map((item) => (
                <div>
                  <span class="text-xs text-color-600 dark:text-color-400 font-semibold block mb-1">
                    {item.label}
                  </span>
                  <span class="text-accent-base">{item.value}</span>
                </div>
              ))
            }
            {
              data.collaboration.projects &&
                data.collaboration.projects.length > 0 && (
                  <div>
                    <span class="text-xs text-color-600 dark:text-color-400 font-semibold block mb-1">
                      Active Projects
                    </span>
                    <span class="text-accent-base">
                      {data.collaboration.projects.length}
                    </span>
                  </div>
                )
            }
          </div>
        </div>
      </div>

      {/* Links & Contact */}
      {
        (actionButtons.length > 0 || contactItems.length > 0) && (
          <div class="links-section mb-8">
            <div class="bg-gradient-to-br from-surface-lighter to-surface rounded-xl border border-accent-one/20 p-6">
              <h3 class="text-xs font-semibold mb-3 text-accent-base uppercase tracking-wider">
                LINKS & CONTACT
              </h3>
              <div class="flex flex-wrap gap-3">
                {actionButtons.map((button) => (
                  <a
                    href={button.href}
                    target={button.target}
                    rel={button.rel}
                    class="inline-flex items-center gap-2 px-4 py-2 bg-accent-two/10 rounded-lg text-sm text-accent-base hover:bg-accent-two/20 transition-colors"
                  >
                    {button.text}
                  </a>
                ))}
              </div>
              {contactItems.length > 0 && (
                <div class="mt-4 pt-4 border-t border-accent-one/10 grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
                  {contactItems.map((item) => (
                    <div class="flex items-center gap-2">
                      <span class="text-color-600 dark:text-color-400">
                        {item.label}:
                      </span>
                      {item.link ? (
                        <a
                          href={item.link}
                          class="text-accent-one hover:text-accent-two transition-colors"
                        >
                          {item.value}
                        </a>
                      ) : (
                        <span class="text-accent-base">{item.value}</span>
                      )}
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        )
      }

      {/* Key Contacts Section */}
      {
        validKeyContacts.length > 0 && (
          <div class="key-contacts-section mb-8">
            <div class="bg-gradient-to-br from-surface-lighter to-surface rounded-xl border border-accent-one/20 p-6">
              <h3 class="text-xs font-semibold mb-3 text-color-600 dark:text-color-400 uppercase tracking-wider">
                KEY CONTACTS
              </h3>
              <div class="flex flex-wrap gap-2">
                {validKeyContacts.map((contact) => (
                  <PersonPopoverWrapper
                    personId={contact.personId}
                    role={contact.role}
                  />
                ))}
              </div>
            </div>
          </div>
        )
      }

      {/* Collaboration Areas */}
      {
        data.collaboration.areas && data.collaboration.areas.length > 0 && (
          <div class="collaboration-areas mb-8">
            <div class="bg-gradient-to-br from-surface-lighter to-surface rounded-xl border border-accent-one/20 p-6">
              <h3 class="text-xs font-semibold mb-3 text-accent-base uppercase tracking-wider">
                COLLABORATION AREAS
              </h3>
              <div class="flex flex-wrap gap-2">
                {data.collaboration.areas.map((area) => (
                  <span class="px-3 py-1.5 bg-accent-one/10 rounded-lg text-sm text-accent-base">
                    {area}
                  </span>
                ))}
              </div>
            </div>
          </div>
        )
      }

      {/* About */}
      <ContentSection title="ABOUT" content={data.description} />
    </Fragment>

    <!-- Main content from MDX file -->
    <!-- <Content /> -->

    <Fragment slot="related">
      {/* Partner Contributions & Projects */}
      {
        (relatedContent.studies.length > 0 ||
          relatedContent.hardware.length > 0 ||
          relatedContent.software.length > 0 ||
          relatedContent.events.length > 0) && (
          <div class="mt-12">
            <h2 class="text-2xl font-bold mb-2">Partner Contributions</h2>
            <p class="text-color-600 dark:text-color-400 mb-8">
              Research, projects, and events involving{" "}
              {data.shortName || data.name}
            </p>

            {/* Studies Grid */}
            {relatedContent.studies.length > 0 && (
              <div class="mb-12">
                <h3 class="text-lg font-semibold mb-4">Studies</h3>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {relatedContent.studies.map((study) => (
                    <ItemCard
                      client:load
                      title={study.data.title}
                      description={study.data.abstract}
                      href={`/studies/${study.id}`}
                      type="studies"
                      featured={study.data.featured}
                    />
                  ))}
                </div>
              </div>
            )}

            {/* Hardware Grid */}
            {relatedContent.hardware.length > 0 && (
              <div class="mb-12">
                <h3 class="text-lg font-semibold mb-4">Hardware</h3>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {relatedContent.hardware.map((hw) => (
                    <ItemCard
                      client:load
                      title={hw.data.name}
                      description={
                        hw.data.shortDescription || hw.data.description
                      }
                      href={`/hardware/${hw.id}`}
                      type="hardware"
                      status={hw.data.status}
                      category={hw.data.category}
                      featured={hw.data.featured}
                      imageUrl={hw.data.images?.hero?.src}
                      imageAlt={hw.data.images?.hero?.alt}
                      links={{
                        github: hw.data.links?.github,
                        docs: hw.data.links?.documentation,
                        website: hw.data.links?.website,
                      }}
                    />
                  ))}
                </div>
              </div>
            )}

            {/* Software Grid */}
            {relatedContent.software.length > 0 && (
              <div class="mb-12">
                <h3 class="text-lg font-semibold mb-4">Software</h3>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {relatedContent.software.map((sw) => (
                    <ItemCard
                      client:load
                      title={sw.data.name}
                      description={
                        sw.data.shortDescription || sw.data.description
                      }
                      href={`/software/${sw.id}`}
                      type="software"
                      status={sw.data.status}
                      category={sw.data.category}
                      featured={sw.data.featured}
                      imageUrl={sw.data.images?.hero?.src}
                      imageAlt={sw.data.images?.hero?.alt}
                      links={{
                        github: sw.data.links?.github,
                        docs: sw.data.links?.documentation,
                        demo: sw.data.links?.demo,
                        website: sw.data.links?.website,
                      }}
                    />
                  ))}
                </div>
              </div>
            )}

            {/* Events Grid */}
            {relatedContent.events.length > 0 && (
              <div class="mb-12">
                <h3 class="text-lg font-semibold mb-4">Events</h3>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {relatedContent.events.map((event) => (
                    <ItemCard
                      client:load
                      title={event.data.displayName ?? event.data.name}
                      description={event.data.description}
                      href={`/events/${event.id}`}
                      type="events"
                      category={event.data.type}
                      featured={event.data.featured}
                      imageUrl={event.data.banner?.src}
                      imageAlt={event.data.banner?.alt}
                    />
                  ))}
                </div>
              </div>
            )}
          </div>
        )
      }

      {/* Related Partners */}
      {
        relatedPartners && relatedPartners.length > 0 && (
          <div class="mt-12">
            <h2 class="text-2xl font-bold mb-2">Related Partners</h2>
            <p class="text-color-600 dark:text-color-400 mb-8">
              Organizations with similar focus areas
            </p>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {relatedPartners.map((partner) => (
                <ItemCard
                  client:load
                  title={partner.data.name}
                  description={partner.data.description}
                  href={`/partners/${partner.id}`}
                  type="partners"
                  featured={partner.data.featured}
                  imageUrl={partner.data.logo?.src}
                  imageAlt={partner.data.logo?.alt}
                  category={typeLabels[partner.data.type] || partner.data.type}
                />
              ))}
            </div>
          </div>
        )
      }
    </Fragment>
  </BaseDetailLayout>
</PageLayout>
