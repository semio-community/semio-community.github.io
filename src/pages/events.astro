---
import PageLayout from "@/layouts/Base.astro";
import Section from "@/components/Section.astro";
import EventCard from "@/components/cards/EventCard.astro";
import CallToActionButton from "@/components/ui/CallToActionButton.astro";
import { Icon } from "astro-icon/components";
import {
  getUpcomingEvents,
  getPastEvents,
  getCurrentEvents,
  getFeaturedEvents,
} from "@/data/events";
import Hero from "@/components/Hero.astro";

const meta = {
  title: "Events",
  description:
    "Conferences, workshops, and training events for the human-robot interaction community",
};

const currentDate = new Date();

// Fetch events from content collections
const upcomingEvents = await getUpcomingEvents();
const pastEvents = await getPastEvents();
const currentEvents = await getCurrentEvents();
const featuredOnlyEvents = await getFeaturedEvents();
const featuredEvents = [
  ...currentEvents.filter(
    (currentEvent) =>
      !featuredOnlyEvents.some((featured) => featured.id === currentEvent.id),
  ),
  ...featuredOnlyEvents.filter(
    (featuredEvent) => featuredEvent.data.startDate > currentDate,
  ),
];

// Group upcoming events by year
const upcomingEventsByYear: Record<number, typeof upcomingEvents> = {};
upcomingEvents.forEach((event) => {
  const year = event.data.startDate.getFullYear();
  if (!upcomingEventsByYear[year]) {
    upcomingEventsByYear[year] = [];
  }
  upcomingEventsByYear[year].push(event);
});
---

<PageLayout meta={meta} noPaddingTop>
  <div
    class="relative pt-16 md:pt-20 lg:pt-4 mb-8 sm:mb-12"
    style="width: 100vw; position: relative; left: 50%; right: 50%; margin-left: -50vw; margin-right: -50vw;"
  >
    <Hero>
      <!-- Title -->
      <h1
        class="text-3xl sm:text-4xl md:text-5xl lg:text-6xl text-accent-base mb-3 sm:mb-4 md:mb-6 font-semibold uppercase tracking-wide"
      >
        Events
      </h1>

      <!-- Subtitle -->
      <p
        class="text-sm sm:text-base md:text-lg lg:text-xl font-light text-accent-base mb-8 sm:mb-10 md:mb-12 max-w-3xl mx-auto leading-relaxed px-2 sm:px-0"
      >
        Gather with the Semio Community at conferences, workshops, and training
        events focused on human-centered robotics and AI.
      </p>

      <!-- CTA Button -->
      <div class="flex flex-wrap justify-center gap-4 mb-8">
        {
          featuredEvents.length > 0 && (
            <CallToActionButton
              href="#featured"
              text="Featured Events"
              size="large"
              indicatorText={featuredEvents.length?.toString()}
            />
          )
        }
        <CallToActionButton
          href="#upcoming"
          text="Upcoming Events"
          size="large"
          variant="secondary"
          indicatorText={upcomingEvents.length?.toString()}
        />
        <CallToActionButton
          href="#past"
          text="Past Events"
          size="large"
          variant="tertiary"
          indicatorText={pastEvents.length?.toString()}
        />
      </div>
    </Hero>
  </div>

  <!-- Featured Events -->
  {
    featuredEvents.length > 0 && (
      <Section
        id="featured"
        title="Featured Events"
        subtitle="Highlighted events, including events happening right now"
        variant="primary"
      >
        <div class="max-w-6xl mx-auto">
          <div data-expandable-section data-initial-count="6">
            <div
              class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
              data-items-container
            >
              {featuredEvents.map((event, index) => (
                <div
                  data-expandable-item
                  data-index={index}
                  class={index >= 6 ? "hidden" : ""}
                >
                  <EventCard eventId={event.id} />
                </div>
              ))}
            </div>
            {featuredEvents.length > 6 && (
              <div class="text-center mt-6">
                <button
                  data-expand-button
                  class="inline-flex items-center gap-2 px-6 py-3 bg-accent-base/10 hover:bg-accent-base/20 rounded-lg font-medium text-accent-base transition-all"
                >
                  <span data-expand-text>
                    View All {featuredEvents.length} Featured & Current Events
                  </span>
                  <span data-collapse-text class="hidden">
                    Show Less
                  </span>
                  <Icon
                    name="solar:alt-arrow-down-line-duotone"
                    class="w-4 h-4 transition-transform"
                    data-expand-icon
                  />
                </button>
              </div>
            )}
          </div>
        </div>
      </Section>
    )
  }

  <!-- Upcoming Events -->
  {
    upcomingEvents.length > 0 && (
      <Section
        id="upcoming"
        title="Upcoming Events"
        subtitle="Meet with the community at these future gatherings"
        variant="secondary"
      >
        <div class="max-w-6xl mx-auto">
          {Object.keys(upcomingEventsByYear)
            .sort()
            .map((year) => (
              <div class="mb-8">
                <h3 class="text-2xl font-semibold mb-4 gradient-brand-text">
                  {year}
                </h3>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {upcomingEventsByYear[Number(year)]?.map((event) => (
                    <EventCard eventId={event.id} />
                  ))}
                </div>
              </div>
            ))}
        </div>
      </Section>
    )
  }

  <!-- Past Events -->
  {
    pastEvents.length > 0 && (
      <Section
        id="past"
        title="Past Events"
        subtitle="Explore our full archive of previous community events"
        variant="tertiary"
      >
        <div class="max-w-6xl mx-auto">
          <div data-expandable-section data-initial-count="6">
            <div
              class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
              data-items-container
            >
              {pastEvents.map((event, index) => (
                <div
                  data-expandable-item
                  data-index={index}
                  class={index >= 6 ? "hidden" : ""}
                >
                  <EventCard eventId={event.id} />
                </div>
              ))}
            </div>
            {pastEvents.length > 6 && (
              <div class="mt-6 text-center">
                <button
                  data-expand-button
                  class="inline-flex items-center gap-2 px-6 py-3 bg-accent-base/10 hover:bg-accent-base/20 rounded-lg font-medium text-accent-base transition-all"
                >
                  <span data-expand-text>
                    View All {pastEvents.length} Past Events
                  </span>
                  <span data-collapse-text class="hidden">
                    Show Less
                  </span>
                  <Icon
                    name="solar:alt-arrow-down-line-duotone"
                    class="w-4 h-4 transition-transform"
                    data-expand-icon
                  />
                </button>
              </div>
            )}
          </div>
        </div>
      </Section>
    )
  }

  <!-- Call to Action -->
  <Section id="events-contribute" title="Partner for an Event">
    <div class="max-w-4xl mx-auto text-center">
      <p class="mb-8 -mt-6 md:-mt-8">
        Planning a conference, workshop, or other community gathering?<br /><br
          class="md:hidden"
        /> Partner with Semio Community to reach a broader robotics/AI audience.
      </p>

      <div class="flex flex-wrap justify-center gap-4">
        <CallToActionButton
          href="https://forms.gle/5iiaThSsGUMzXWsu6"
          text="Request Event Services"
          size="large"
        />
      </div>
    </div>
  </Section>
</PageLayout>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const expandableSections = document.querySelectorAll(
      "[data-expandable-section]",
    );

    expandableSections.forEach((section) => {
      const button = section.querySelector("[data-expand-button]");
      const items = section.querySelectorAll("[data-expandable-item]");
      const expandText = section.querySelector("[data-expand-text]");
      const collapseText = section.querySelector("[data-collapse-text]");
      const icon = section.querySelector("[data-expand-icon]");
      const initialCount = parseInt(
        (section as HTMLElement).dataset.initialCount || "6",
      );

      if (!button || items.length <= initialCount) {
        if (button) (button as HTMLElement).style.display = "none";
        return;
      }

      let isExpanded = false;

      button.addEventListener("click", () => {
        isExpanded = !isExpanded;

        items.forEach((item, index) => {
          if (index >= initialCount) {
            if (isExpanded) {
              item.classList.remove("hidden");
            } else {
              item.classList.add("hidden");
            }
          }
        });

        if (expandText && collapseText) {
          if (isExpanded) {
            expandText.classList.add("hidden");
            collapseText.classList.remove("hidden");
          } else {
            expandText.classList.remove("hidden");
            collapseText.classList.add("hidden");
          }
        }

        if (icon) {
          if (isExpanded) {
            (icon as HTMLElement).style.transform = "rotate(180deg)";
          } else {
            (icon as HTMLElement).style.transform = "rotate(0deg)";
          }
        }

        if (!isExpanded) {
          const sectionTop =
            section.getBoundingClientRect().top + window.scrollY - 100;
          window.scrollTo({
            top: sectionTop,
            behavior: "smooth",
          });
        }
      });
    });
  });
</script>
