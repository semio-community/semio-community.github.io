---
import {
  type CollectionEntry,
  getCollection,
  render,
  getEntry,
} from "astro:content";
import PageLayout from "@/layouts/Base.astro";
import BaseDetailLayout from "@/components/detail/BaseDetailLayout.astro";
import { DetailHero } from "@/components/detail/DetailHero";
import { RelatedItemsGrid } from "@/components/detail/RelatedItemsGrid";
import InfoCard from "@/components/detail/InfoCard.astro";
import LinkButton from "@/components/detail/LinkButton.astro";
import ContentSection from "@/components/detail/ContentSection.astro";
import SpecificationsList from "@/components/detail/SpecificationsList.astro";
import FeaturesList from "@/components/detail/FeaturesList.astro";
import ChipsList from "@/components/detail/ChipsList.astro";
import TagsList from "@/components/detail/TagsList.astro";
import PricingInfo from "@/components/detail/PricingInfo.astro";
import { getRelatedHardware } from "@/data/hardware";
import { getPerson } from "@/data/people";
import PersonPopoverWrapper from "@/components/people/PersonPopoverWrapper.astro";
import OrganizationChip from "@/components/ui/OrganizationChip.astro";
import BasicChip from "@/components/ui/BasicChip.astro";
import { Fragment } from "react";
import {
  getStatusLabel,
  getStatusColor,
  getCategoryLabel,
} from "@/config/statusConfig";
import { transformLinksToButtons } from "@/config/linkConfig";

export async function getStaticPaths() {
  const hardware = await getCollection("hardware", ({ data }) => {
    // In production, exclude drafts. In development, show all.
    return import.meta.env.PROD ? data.draft !== true : true;
  });
  return hardware.map((entry) => ({
    params: { slug: entry.id },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { data } = entry;

// Get related hardware
const relatedHardware = await getRelatedHardware(entry, 3);

const meta = {
  title: `${data.name} - Hardware Platform`,
  description: data.description,
};

// Prepare status badges using centralized configuration
const badges = [
  {
    text: getStatusLabel(data.status),
    color: getStatusColor(data.status, "chip") as any,
    variant: "solid" as const,
  },
].filter(Boolean) as Array<{
  text: string;
  color: "green" | "blue" | "orange" | "red" | "yellow" | "gray" | "accent";
  variant: "solid" | "outline";
}>;

// Prepare link buttons using centralized configuration
const linkButtons = data.links ? transformLinksToButtons(data.links) : [];

// Get organization details
const leadOrg = data.leadOrganization
  ? await getEntry("organizations", data.leadOrganization)
  : null;
const supportingOrgs = data.supportingOrganizations
  ? await Promise.all(
      data.supportingOrganizations.map((id) => getEntry("organizations", id)),
    )
  : [];

// Get contributors with their full data
const contributors = data.contributors || [];
const peopleContributors = await Promise.all(
  contributors
    .filter((c) => c.type === "person")
    .map(async (contributor) => {
      const person = await getPerson(contributor.id);
      return {
        ...contributor,
        data: person?.data,
      };
    }),
);
// Filter out any contributors whose person data couldn't be found (e.g., drafts)
const validPeopleContributors = peopleContributors.filter(
  (c) => c.data !== undefined,
);

const orgContributors = await Promise.all(
  contributors
    .filter((c) => c.type === "organization")
    .map(async (contributor) => {
      const org = await getEntry("organizations", contributor.id);
      return {
        ...contributor,
        data: org?.data,
      };
    }),
);

// Get category label using centralized configuration
const categoryLabel = getCategoryLabel("hardware", data.category);

// Prepare specifications for display
const specificationItems = data.specifications || {};
---

<PageLayout meta={meta} noPaddingTop>
  <BaseDetailLayout>
    <Fragment slot="hero">
      <DetailHero
        client:load
        image={data.images?.hero}
        title={data.name}
        subtitle={data.shortDescription}
        badges={badges}
        featured={data.featured}
        entityType="hardware"
      />
    </Fragment>

    {/* External Links */}
    <Fragment slot="links">
      {
        linkButtons.length > 0 && (
          <InfoCard title="LINKS & RESOURCES">
            <div class="flex flex-wrap gap-3">
              {linkButtons.map((button) => (
                <LinkButton
                  href={button.href}
                  text={button.text}
                  icon={button.icon}
                  external={button.external}
                  variant={button.variant || "default"}
                />
              ))}
            </div>
          </InfoCard>
        )
      }
    </Fragment>

    {/* Description */}
    <Fragment slot="description">
      <ContentSection title="DESCRIPTION" content={data.description} />
    </Fragment>

    {/* Contributors and Organizations */}
    <Fragment slot="contributors">
      {
        (orgContributors.length > 0 || validPeopleContributors.length > 0) && (
          <div class="contributors-section mb-8">
            <div class="bg-gradient-to-br from-surface-lighter to-surface rounded-xl border border-accent-one/20 p-6">
              {/* Organizations Section */}
              {orgContributors.length > 0 && (
                <div class="organizations mb-6">
                  <h3 class="text-xs font-semibold mb-3 text-color-600 dark:text-color-400 uppercase tracking-wider">
                    ORGANIZATIONS
                  </h3>
                  <div class="flex flex-wrap gap-2">
                    {orgContributors.map((contributor) => (
                      <OrganizationChip
                        partnerId={contributor.id}
                        role={contributor.role || "Contributing Organization"}
                      />
                    ))}
                  </div>
                </div>
              )}

              {/* People Contributors Section */}
              {validPeopleContributors.length > 0 && (
                <div class="people-contributors">
                  <h3 class="text-xs font-semibold mb-3 text-color-600 dark:text-color-400 uppercase tracking-wider">
                    CONTRIBUTORS
                  </h3>
                  <div class="flex flex-wrap gap-2">
                    {validPeopleContributors.map((contributor) => (
                      <PersonPopoverWrapper
                        personId={contributor.id}
                        role={contributor.role}
                      />
                    ))}
                  </div>
                </div>
              )}

              {/* Chips row for category and research areas */}
              <div class="mt-6 pt-4 border-t border-accent-one/10 flex flex-wrap gap-2">
                {categoryLabel && (
                  <BasicChip text={categoryLabel} variant="tertiary" />
                )}
                {data.researchAreas &&
                  data.researchAreas.map((area: string) => (
                    <BasicChip text={area} variant="default" />
                  ))}
              </div>

              {/* Stats Row */}
              <div class="mt-6 pt-4 border-t border-accent-one/10 flex flex-wrap gap-6 text-xs text-color-600 dark:text-color-400">
                {leadOrg && (
                  <div class="flex items-center gap-2">
                    <span class="font-semibold">Lead:</span>
                    <span>{leadOrg.data?.shortName || leadOrg.data?.name}</span>
                  </div>
                )}
                {supportingOrgs.length > 0 && (
                  <div class="flex items-center gap-2">
                    <span class="font-semibold">Supporting:</span>
                    <span>
                      {supportingOrgs.length} org
                      {supportingOrgs.length !== 1 ? "s" : ""}
                    </span>
                  </div>
                )}
                {validPeopleContributors.length > 0 && (
                  <div class="flex items-center gap-2">
                    <span class="font-semibold">Contributors:</span>
                    <span>
                      {validPeopleContributors.length}{" "}
                      {validPeopleContributors.length === 1
                        ? "person"
                        : "people"}
                    </span>
                  </div>
                )}
              </div>
            </div>
          </div>
        )
      }
    </Fragment>

    {/* Specifications */}
    <Fragment slot="specifications">
      <SpecificationsList
        title="SPECIFICATIONS"
        items={specificationItems}
        defaultItemIcon="solar:settings-minimalistic-line-duotone"
      />
    </Fragment>

    {/* Features */}
    <Fragment slot="features">
      <FeaturesList title="KEY FEATURES" features={data.features} />
    </Fragment>

    {/* Metadata (Pricing) */}
    <Fragment slot="metadata">
      {data.pricing && <PricingInfo pricing={data.pricing} />}
    </Fragment>

    {/* Tags and Applications */}
    <Fragment slot="tags">
      {
        data.applications && data.applications.length > 0 && (
          <ChipsList
            title="APPLICATIONS"
            items={data.applications}
            variant="secondary"
          />
        )
      }
      <TagsList tags={data.tags} baseUrl="/hardware/tags" variant="secondary" />
    </Fragment>

    {/* Main content from MDX file */}
    <!-- <Content /> -->

    {/* Related Hardware */}
    <Fragment slot="related">
      {
        relatedHardware && relatedHardware.length > 0 && (
          <RelatedItemsGrid
            client:load
            title="Related Hardware"
            subtitle="Explore similar robotic platforms"
            items={relatedHardware}
            itemType="hardware"
            columns={3}
          />
        )
      }
    </Fragment>
  </BaseDetailLayout>
</PageLayout>
