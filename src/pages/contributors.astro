---
import PageLayout from "@/layouts/Base.astro";
import Section from "@/components/Section.astro";
import Hero from "@/components/Hero.astro";
import PersonListElement from "@/components/cards/PersonListElement.astro";
import PersonCard from "@/components/cards/PersonCard.astro";
import PartnerCard from "@/components/cards/PartnerCard.astro";
import SubsectionGrid from "@/components/sections/SubsectionGrid.astro";
import CallToActionButton from "@/components/ui/CallToActionButton.astro";
import { getAllPartners } from "@/data/partners";
import { getAllPeople } from "@/data/people";
import { getCollection } from "astro:content";

const meta = {
  title: "Contributors",
  description:
    "People and organizations advancing human-centered robotics and AI together",
};

// Fetch data
const allPartners = await getAllPartners();
const allPeople = await getAllPeople();

// Preload organizations and build id -> shortName/name map
const organizations = await getCollection("organizations", ({ data }) =>
  import.meta.env.PROD ? data.draft !== true : true,
);
const orgNameById = Object.fromEntries(
  organizations.map((org) => [org.id, org.data.shortName || org.data.name]),
);
const donorPeople = allPeople.filter((p) => p.data.isDonor);
const donorOrganizations = organizations.filter((org) => org.data.isDonor);
const donorsCount = donorPeople.length + donorOrganizations.length;
const grantMakers = organizations.filter((org) => org.data.isGrantMaker);

// Aggregate unique sponsors across donors (people + orgs) and grant-making agencies
const sponsorsUniqueCount = (() => {
  const ids = new Set<string>();
  donorPeople.forEach((p) => ids.add(`p:${p.id}`));
  donorOrganizations.forEach((o) => ids.add(`o:${o.id}`));
  grantMakers.forEach((o) => ids.add(`o:${o.id}`));
  return ids.size;
})();

// Group partners by type
const partnersByType: Record<string, typeof allPartners> = {};
for (const partner of allPartners) {
  if (!partnersByType[partner.data.type]) {
    partnersByType[partner.data.type] = [];
  }
  partnersByType[partner.data.type]!.push(partner);
}

// People groups (contributors only)
// Temporary flag to hide board members and include them in community list
// To restore: set HIDE_BOARD_MEMBERS to false (or remove this flag entirely)
// and revert the communityMembers filter to exclude board members.
const HIDE_BOARD_MEMBERS = true;

const boardMembers = allPeople.filter(
  (p) => p.data.isContributor && p.data.boardMember,
);
const communityMembers = allPeople.filter(
  (p) =>
    p.data.isContributor && (HIDE_BOARD_MEMBERS ? true : !p.data.boardMember),
);

// Partner type info and ordering
const partnerTypeInfo: Record<
  string,
  { title: string; icon: string; description: string }
> = {
  industry: {
    title: "Industry Partners",
    icon: "solar:buildings-2-line-duotone",
    description: "Companies driving innovation in robotics and AI",
  },
  nonprofit: {
    title: "Non-Profit Partners",
    icon: "solar:hand-shake-line-duotone",
    description: "Organizations advancing social impact through technology",
  },
  academic: {
    title: "Academic Partners",
    icon: "solar:square-academic-cap-line-duotone",
    description: "Leading universities and research institutions",
  },
  government: {
    title: "Government Partners",
    icon: "solar:flag-2-line-duotone",
    description: "Public sector organizations and agencies",
  },
};
const orderedPartnerTypes = ["industry", "nonprofit", "academic", "government"];

// Helper to compute a human-readable current/primary affiliation label
function affiliationLabelFor(person: any) {
  const aff =
    person.data.affiliations?.find((a: any) => a.isPrimary) ??
    person.data.affiliations?.find((a: any) => !a.endDate);
  return aff
    ? orgNameById[aff.organizationId] || aff.organizationId
    : undefined;
}
const allPartnerTypesInOrder = [
  ...orderedPartnerTypes,
  ...Object.keys(partnersByType).filter(
    (t) => !orderedPartnerTypes.includes(t),
  ),
];
---

<PageLayout meta={meta} noPaddingTop>
  <!-- Hero Section -->
  <div
    class="relative pt-16 md:pt-20 lg:pt-4 mb-8 sm:mb-12"
    style="width: 100vw; position: relative; left: 50%; right: 50%; margin-left: -50vw; margin-right: -50vw;"
  >
    <Hero>
      <h1
        class="text-3xl sm:text-4xl md:text-5xl lg:text-6xl text-accent-base mb-3 sm:mb-4 md:mb-6 font-semibold uppercase tracking-wide"
      >
        Contributors
      </h1>

      <p
        class="text-sm sm:text-base md:text-lg lg:text-xl font-light text-accent-base mb-8 sm:mb-10 md:mb-12 max-w-3xl mx-auto leading-relaxed px-2 sm:px-0"
      >
        Meet the people and organizations collaborating to advance
        human-centered robotics and AI.
      </p>

      <div class="flex flex-wrap justify-center gap-4 mb-8">
        <CallToActionButton
          href="#people"
          text="People"
          size="large"
          indicatorText={(
            boardMembers.length + communityMembers.length || 0
          ).toString()}
        />
        <CallToActionButton
          href="#partners"
          text="Partners"
          size="large"
          variant="secondary"
          indicatorText={(allPartners.length || 0).toString()}
        />
        <CallToActionButton
          href="#sponsors"
          text="Sponsors"
          size="large"
          variant="tertiary"
          indicatorText={(sponsorsUniqueCount || 0).toString()}
        />
      </div>
    </Hero>
  </div>

  <!-- People -->
  <Section
    id="people"
    title="People"
    subtitle="The individuals who lead and support our community"
  >
    <div class="max-w-6xl mx-auto">
      {
        !HIDE_BOARD_MEMBERS && (
          <SubsectionGrid
            id="board-members"
            title="Board Members"
            icon="solar:crown-line-duotone"
            count={boardMembers.length}
            gridClass="grid grid-cols-1 md:grid-cols-2 gap-4"
            empty={boardMembers.length === 0}
            emptyIcon="solar:users-group-rounded-line-duotone"
            emptyMessage="Board members will be announced soon."
          >
            {boardMembers.map((person) => (
              <PersonListElement
                personId={person.id}
                affiliationLabel={affiliationLabelFor(person)}
              />
            ))}
          </SubsectionGrid>
        )
      }

      <SubsectionGrid
        id="community-members"
        title="Community Members"
        icon="solar:users-group-rounded-line-duotone"
        count={communityMembers.length}
        gridClass="grid grid-cols-1 md:grid-cols-2 gap-4"
        empty={communityMembers.length === 0}
        emptyIcon="solar:users-group-rounded-line-duotone"
        emptyMessage="Community contributors coming soon."
      >
        {
          communityMembers.map((person) => (
            <PersonListElement
              personId={person.id}
              affiliationLabel={affiliationLabelFor(person)}
            />
          ))
        }
      </SubsectionGrid>
    </div>
  </Section>

  <!-- Partners -->
  <Section
    id="partners"
    title="Partners"
    subtitle="Organizations committed to advancing HRI together"
  >
    <div class="max-w-6xl mx-auto">
      {
        allPartnerTypesInOrder.map((type) => {
          const partners = partnersByType[type] || [];
          const info = partnerTypeInfo[type];
          return (
            <SubsectionGrid
              id={`partners-${type}`}
              title={info?.title || type}
              subtitle={info?.description}
              icon={info?.icon || "solar:folder-line-duotone"}
              count={partners.length}
              empty={partners.length === 0}
              emptyIcon="solar:buildings-2-line-duotone"
              emptyMessage="Partner information coming soon."
            >
              {partners.map((partner) => (
                <PartnerCard partnerId={partner.id} />
              ))}
            </SubsectionGrid>
          );
        })
      }
    </div>
  </Section>

  <!-- Sponsors -->
  <Section
    id="sponsors"
    title="Sponsors"
    subtitle="Financial supporters that power our mission"
  >
    <div class="max-w-6xl mx-auto">
      <SubsectionGrid
        id="sponsors-donors"
        title="Donors"
        icon="solar:wallet-money-line-duotone"
        count={donorsCount}
        empty={donorsCount === 0}
        emptyIcon="solar:wallet-money-line-duotone"
        emptyMessage="Donor acknowledgments coming soon."
      >
        {donorPeople.map((person) => <PersonCard personId={person.id} />)}
        {donorOrganizations.map((org) => <PartnerCard partnerId={org.id} />)}
      </SubsectionGrid>

      <SubsectionGrid
        id="sponsors-grants"
        title="Grant-making Agencies"
        icon="solar:hand-money-line-duotone"
        count={grantMakers.length}
        empty={grantMakers.length === 0}
        emptyIcon="solar:hand-money-line-duotone"
        emptyMessage="Grant-making agencies coming soon."
      >
        {grantMakers.map((org) => <PartnerCard partnerId={org.id} />)}
      </SubsectionGrid>
    </div>
  </Section>
</PageLayout>
